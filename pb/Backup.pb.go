//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless optional by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: Backup.proto

// This file contains Backup manifest

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BackupType int32

const (
	BackupType_FULL        BackupType = 0
	BackupType_INCREMENTAL BackupType = 1
)

// Enum value maps for BackupType.
var (
	BackupType_name = map[int32]string{
		0: "FULL",
		1: "INCREMENTAL",
	}
	BackupType_value = map[string]int32{
		"FULL":        0,
		"INCREMENTAL": 1,
	}
)

func (x BackupType) Enum() *BackupType {
	p := new(BackupType)
	*p = x
	return p
}

func (x BackupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupType) Descriptor() protoreflect.EnumDescriptor {
	return file_Backup_proto_enumTypes[0].Descriptor()
}

func (BackupType) Type() protoreflect.EnumType {
	return &file_Backup_proto_enumTypes[0]
}

func (x BackupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackupType(num)
	return nil
}

// Deprecated: Use BackupType.Descriptor instead.
func (BackupType) EnumDescriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{0}
}

//*
// Backup session states
type BackupInfo_BackupState int32

const (
	BackupInfo_RUNNING   BackupInfo_BackupState = 0
	BackupInfo_COMPLETE  BackupInfo_BackupState = 1
	BackupInfo_FAILED    BackupInfo_BackupState = 2
	BackupInfo_CANCELLED BackupInfo_BackupState = 3
)

// Enum value maps for BackupInfo_BackupState.
var (
	BackupInfo_BackupState_name = map[int32]string{
		0: "RUNNING",
		1: "COMPLETE",
		2: "FAILED",
		3: "CANCELLED",
	}
	BackupInfo_BackupState_value = map[string]int32{
		"RUNNING":   0,
		"COMPLETE":  1,
		"FAILED":    2,
		"CANCELLED": 3,
	}
)

func (x BackupInfo_BackupState) Enum() *BackupInfo_BackupState {
	p := new(BackupInfo_BackupState)
	*p = x
	return p
}

func (x BackupInfo_BackupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupInfo_BackupState) Descriptor() protoreflect.EnumDescriptor {
	return file_Backup_proto_enumTypes[1].Descriptor()
}

func (BackupInfo_BackupState) Type() protoreflect.EnumType {
	return &file_Backup_proto_enumTypes[1]
}

func (x BackupInfo_BackupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackupInfo_BackupState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackupInfo_BackupState(num)
	return nil
}

// Deprecated: Use BackupInfo_BackupState.Descriptor instead.
func (BackupInfo_BackupState) EnumDescriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{4, 0}
}

//*
// Phases of a backup session in RUNNING state
//
type BackupInfo_BackupPhase int32

const (
	BackupInfo_REQUEST             BackupInfo_BackupPhase = 0
	BackupInfo_SNAPSHOT            BackupInfo_BackupPhase = 1
	BackupInfo_PREPARE_INCREMENTAL BackupInfo_BackupPhase = 2
	BackupInfo_SNAPSHOTCOPY        BackupInfo_BackupPhase = 3
	BackupInfo_INCREMENTAL_COPY    BackupInfo_BackupPhase = 4
	BackupInfo_STORE_MANIFEST      BackupInfo_BackupPhase = 5
)

// Enum value maps for BackupInfo_BackupPhase.
var (
	BackupInfo_BackupPhase_name = map[int32]string{
		0: "REQUEST",
		1: "SNAPSHOT",
		2: "PREPARE_INCREMENTAL",
		3: "SNAPSHOTCOPY",
		4: "INCREMENTAL_COPY",
		5: "STORE_MANIFEST",
	}
	BackupInfo_BackupPhase_value = map[string]int32{
		"REQUEST":             0,
		"SNAPSHOT":            1,
		"PREPARE_INCREMENTAL": 2,
		"SNAPSHOTCOPY":        3,
		"INCREMENTAL_COPY":    4,
		"STORE_MANIFEST":      5,
	}
)

func (x BackupInfo_BackupPhase) Enum() *BackupInfo_BackupPhase {
	p := new(BackupInfo_BackupPhase)
	*p = x
	return p
}

func (x BackupInfo_BackupPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupInfo_BackupPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_Backup_proto_enumTypes[2].Descriptor()
}

func (BackupInfo_BackupPhase) Type() protoreflect.EnumType {
	return &file_Backup_proto_enumTypes[2]
}

func (x BackupInfo_BackupPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackupInfo_BackupPhase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackupInfo_BackupPhase(num)
	return nil
}

// Deprecated: Use BackupInfo_BackupPhase.Descriptor instead.
func (BackupInfo_BackupPhase) EnumDescriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{4, 1}
}

//*
// ServerTimestamp keeps last WAL roll time per Region Server
type ServerTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName *ServerName `protobuf:"bytes,1,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	Timestamp  *uint64     `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *ServerTimestamp) Reset() {
	*x = ServerTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Backup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTimestamp) ProtoMessage() {}

func (x *ServerTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_Backup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTimestamp.ProtoReflect.Descriptor instead.
func (*ServerTimestamp) Descriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{0}
}

func (x *ServerTimestamp) GetServerName() *ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *ServerTimestamp) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

//*
//  TableServerTimestamp keeps last WAL roll time per Region Server & Table
//  Each table have different last WAL roll time stamps across cluster, on every RS
type TableServerTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName       *TableName         `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	ServerTimestamp []*ServerTimestamp `protobuf:"bytes,2,rep,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
}

func (x *TableServerTimestamp) Reset() {
	*x = TableServerTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Backup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableServerTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableServerTimestamp) ProtoMessage() {}

func (x *TableServerTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_Backup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableServerTimestamp.ProtoReflect.Descriptor instead.
func (*TableServerTimestamp) Descriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{1}
}

func (x *TableServerTimestamp) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *TableServerTimestamp) GetServerTimestamp() []*ServerTimestamp {
	if x != nil {
		return x.ServerTimestamp
	}
	return nil
}

//*
// Structure keeps relevant info for backup restore session
type BackupImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupId      *string                 `protobuf:"bytes,1,opt,name=backup_id,json=backupId" json:"backup_id,omitempty"`
	BackupType    *BackupType             `protobuf:"varint,2,opt,name=backup_type,json=backupType,enum=pb.BackupType" json:"backup_type,omitempty"`
	BackupRootDir *string                 `protobuf:"bytes,3,opt,name=backup_root_dir,json=backupRootDir" json:"backup_root_dir,omitempty"`
	TableList     []*TableName            `protobuf:"bytes,4,rep,name=table_list,json=tableList" json:"table_list,omitempty"`
	StartTs       *uint64                 `protobuf:"varint,5,opt,name=start_ts,json=startTs" json:"start_ts,omitempty"`
	CompleteTs    *uint64                 `protobuf:"varint,6,opt,name=complete_ts,json=completeTs" json:"complete_ts,omitempty"`
	Ancestors     []*BackupImage          `protobuf:"bytes,7,rep,name=ancestors" json:"ancestors,omitempty"`
	TstMap        []*TableServerTimestamp `protobuf:"bytes,8,rep,name=tst_map,json=tstMap" json:"tst_map,omitempty"`
}

func (x *BackupImage) Reset() {
	*x = BackupImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Backup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupImage) ProtoMessage() {}

func (x *BackupImage) ProtoReflect() protoreflect.Message {
	mi := &file_Backup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupImage.ProtoReflect.Descriptor instead.
func (*BackupImage) Descriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{2}
}

func (x *BackupImage) GetBackupId() string {
	if x != nil && x.BackupId != nil {
		return *x.BackupId
	}
	return ""
}

func (x *BackupImage) GetBackupType() BackupType {
	if x != nil && x.BackupType != nil {
		return *x.BackupType
	}
	return BackupType_FULL
}

func (x *BackupImage) GetBackupRootDir() string {
	if x != nil && x.BackupRootDir != nil {
		return *x.BackupRootDir
	}
	return ""
}

func (x *BackupImage) GetTableList() []*TableName {
	if x != nil {
		return x.TableList
	}
	return nil
}

func (x *BackupImage) GetStartTs() uint64 {
	if x != nil && x.StartTs != nil {
		return *x.StartTs
	}
	return 0
}

func (x *BackupImage) GetCompleteTs() uint64 {
	if x != nil && x.CompleteTs != nil {
		return *x.CompleteTs
	}
	return 0
}

func (x *BackupImage) GetAncestors() []*BackupImage {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

func (x *BackupImage) GetTstMap() []*TableServerTimestamp {
	if x != nil {
		return x.TstMap
	}
	return nil
}

//*
// Internal structure used during backup
type BackupTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    *TableName `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	SnapshotName *string    `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName" json:"snapshot_name,omitempty"`
}

func (x *BackupTableInfo) Reset() {
	*x = BackupTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Backup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupTableInfo) ProtoMessage() {}

func (x *BackupTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Backup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupTableInfo.ProtoReflect.Descriptor instead.
func (*BackupTableInfo) Descriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{3}
}

func (x *BackupTableInfo) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *BackupTableInfo) GetSnapshotName() string {
	if x != nil && x.SnapshotName != nil {
		return *x.SnapshotName
	}
	return ""
}

//*
// Backup session information
type BackupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupId          *string                               `protobuf:"bytes,1,opt,name=backup_id,json=backupId" json:"backup_id,omitempty"`
	BackupType        *BackupType                           `protobuf:"varint,2,opt,name=backup_type,json=backupType,enum=pb.BackupType" json:"backup_type,omitempty"`
	BackupRootDir     *string                               `protobuf:"bytes,3,opt,name=backup_root_dir,json=backupRootDir" json:"backup_root_dir,omitempty"`
	BackupState       *BackupInfo_BackupState               `protobuf:"varint,4,opt,name=backup_state,json=backupState,enum=pb.BackupInfo_BackupState" json:"backup_state,omitempty"`
	BackupPhase       *BackupInfo_BackupPhase               `protobuf:"varint,5,opt,name=backup_phase,json=backupPhase,enum=pb.BackupInfo_BackupPhase" json:"backup_phase,omitempty"`
	FailedMessage     *string                               `protobuf:"bytes,6,opt,name=failed_message,json=failedMessage" json:"failed_message,omitempty"`
	BackupTableInfo   []*BackupTableInfo                    `protobuf:"bytes,7,rep,name=backup_table_info,json=backupTableInfo" json:"backup_table_info,omitempty"`
	StartTs           *uint64                               `protobuf:"varint,8,opt,name=start_ts,json=startTs" json:"start_ts,omitempty"`
	CompleteTs        *uint64                               `protobuf:"varint,9,opt,name=complete_ts,json=completeTs" json:"complete_ts,omitempty"`
	Progress          *uint32                               `protobuf:"varint,10,opt,name=progress" json:"progress,omitempty"`
	WorkersNumber     *uint32                               `protobuf:"varint,11,opt,name=workers_number,json=workersNumber" json:"workers_number,omitempty"`
	Bandwidth         *uint64                               `protobuf:"varint,12,opt,name=bandwidth" json:"bandwidth,omitempty"`
	TableSetTimestamp map[string]*BackupInfo_RSTimestampMap `protobuf:"bytes,13,rep,name=table_set_timestamp,json=tableSetTimestamp" json:"table_set_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *BackupInfo) Reset() {
	*x = BackupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Backup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupInfo) ProtoMessage() {}

func (x *BackupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Backup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupInfo.ProtoReflect.Descriptor instead.
func (*BackupInfo) Descriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{4}
}

func (x *BackupInfo) GetBackupId() string {
	if x != nil && x.BackupId != nil {
		return *x.BackupId
	}
	return ""
}

func (x *BackupInfo) GetBackupType() BackupType {
	if x != nil && x.BackupType != nil {
		return *x.BackupType
	}
	return BackupType_FULL
}

func (x *BackupInfo) GetBackupRootDir() string {
	if x != nil && x.BackupRootDir != nil {
		return *x.BackupRootDir
	}
	return ""
}

func (x *BackupInfo) GetBackupState() BackupInfo_BackupState {
	if x != nil && x.BackupState != nil {
		return *x.BackupState
	}
	return BackupInfo_RUNNING
}

func (x *BackupInfo) GetBackupPhase() BackupInfo_BackupPhase {
	if x != nil && x.BackupPhase != nil {
		return *x.BackupPhase
	}
	return BackupInfo_REQUEST
}

func (x *BackupInfo) GetFailedMessage() string {
	if x != nil && x.FailedMessage != nil {
		return *x.FailedMessage
	}
	return ""
}

func (x *BackupInfo) GetBackupTableInfo() []*BackupTableInfo {
	if x != nil {
		return x.BackupTableInfo
	}
	return nil
}

func (x *BackupInfo) GetStartTs() uint64 {
	if x != nil && x.StartTs != nil {
		return *x.StartTs
	}
	return 0
}

func (x *BackupInfo) GetCompleteTs() uint64 {
	if x != nil && x.CompleteTs != nil {
		return *x.CompleteTs
	}
	return 0
}

func (x *BackupInfo) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *BackupInfo) GetWorkersNumber() uint32 {
	if x != nil && x.WorkersNumber != nil {
		return *x.WorkersNumber
	}
	return 0
}

func (x *BackupInfo) GetBandwidth() uint64 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *BackupInfo) GetTableSetTimestamp() map[string]*BackupInfo_RSTimestampMap {
	if x != nil {
		return x.TableSetTimestamp
	}
	return nil
}

type BackupInfo_RSTimestampMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsTimestamp map[string]uint64 `protobuf:"bytes,1,rep,name=rs_timestamp,json=rsTimestamp" json:"rs_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (x *BackupInfo_RSTimestampMap) Reset() {
	*x = BackupInfo_RSTimestampMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Backup_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupInfo_RSTimestampMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupInfo_RSTimestampMap) ProtoMessage() {}

func (x *BackupInfo_RSTimestampMap) ProtoReflect() protoreflect.Message {
	mi := &file_Backup_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupInfo_RSTimestampMap.ProtoReflect.Descriptor instead.
func (*BackupInfo_RSTimestampMap) Descriptor() ([]byte, []int) {
	return file_Backup_proto_rawDescGZIP(), []int{4, 1}
}

func (x *BackupInfo_RSTimestampMap) GetRsTimestamp() map[string]uint64 {
	if x != nil {
		return x.RsTimestamp
	}
	return nil
}

var File_Backup_proto protoreflect.FileDescriptor

var file_Backup_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x60, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcf, 0x02, 0x0a, 0x0b, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x12, 0x2c,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x74, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x64, 0x0a, 0x0f, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xab, 0x08, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x6f,
	0x6f, 0x74, 0x44, 0x69, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x63, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x53, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa3, 0x01, 0x0a, 0x0e, 0x52, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x72, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x53,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x61, 0x70, 0x2e, 0x52, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0b, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22,
	0x7d, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x43, 0x4f,
	0x50, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x27,
	0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x42, 0x49, 0x0a, 0x31, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x88, 0x01, 0x01, 0xa0,
	0x01, 0x01,
}

var (
	file_Backup_proto_rawDescOnce sync.Once
	file_Backup_proto_rawDescData = file_Backup_proto_rawDesc
)

func file_Backup_proto_rawDescGZIP() []byte {
	file_Backup_proto_rawDescOnce.Do(func() {
		file_Backup_proto_rawDescData = protoimpl.X.CompressGZIP(file_Backup_proto_rawDescData)
	})
	return file_Backup_proto_rawDescData
}

var file_Backup_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_Backup_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_Backup_proto_goTypes = []interface{}{
	(BackupType)(0),                   // 0: pb.BackupType
	(BackupInfo_BackupState)(0),       // 1: pb.BackupInfo.BackupState
	(BackupInfo_BackupPhase)(0),       // 2: pb.BackupInfo.BackupPhase
	(*ServerTimestamp)(nil),           // 3: pb.ServerTimestamp
	(*TableServerTimestamp)(nil),      // 4: pb.TableServerTimestamp
	(*BackupImage)(nil),               // 5: pb.BackupImage
	(*BackupTableInfo)(nil),           // 6: pb.BackupTableInfo
	(*BackupInfo)(nil),                // 7: pb.BackupInfo
	nil,                               // 8: pb.BackupInfo.TableSetTimestampEntry
	(*BackupInfo_RSTimestampMap)(nil), // 9: pb.BackupInfo.RSTimestampMap
	nil,                               // 10: pb.BackupInfo.RSTimestampMap.RsTimestampEntry
	(*ServerName)(nil),                // 11: pb.ServerName
	(*TableName)(nil),                 // 12: pb.TableName
}
var file_Backup_proto_depIdxs = []int32{
	11, // 0: pb.ServerTimestamp.server_name:type_name -> pb.ServerName
	12, // 1: pb.TableServerTimestamp.table_name:type_name -> pb.TableName
	3,  // 2: pb.TableServerTimestamp.server_timestamp:type_name -> pb.ServerTimestamp
	0,  // 3: pb.BackupImage.backup_type:type_name -> pb.BackupType
	12, // 4: pb.BackupImage.table_list:type_name -> pb.TableName
	5,  // 5: pb.BackupImage.ancestors:type_name -> pb.BackupImage
	4,  // 6: pb.BackupImage.tst_map:type_name -> pb.TableServerTimestamp
	12, // 7: pb.BackupTableInfo.table_name:type_name -> pb.TableName
	0,  // 8: pb.BackupInfo.backup_type:type_name -> pb.BackupType
	1,  // 9: pb.BackupInfo.backup_state:type_name -> pb.BackupInfo.BackupState
	2,  // 10: pb.BackupInfo.backup_phase:type_name -> pb.BackupInfo.BackupPhase
	6,  // 11: pb.BackupInfo.backup_table_info:type_name -> pb.BackupTableInfo
	8,  // 12: pb.BackupInfo.table_set_timestamp:type_name -> pb.BackupInfo.TableSetTimestampEntry
	9,  // 13: pb.BackupInfo.TableSetTimestampEntry.value:type_name -> pb.BackupInfo.RSTimestampMap
	10, // 14: pb.BackupInfo.RSTimestampMap.rs_timestamp:type_name -> pb.BackupInfo.RSTimestampMap.RsTimestampEntry
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_Backup_proto_init() }
func file_Backup_proto_init() {
	if File_Backup_proto != nil {
		return
	}
	file_HBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Backup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Backup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableServerTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Backup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Backup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Backup_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Backup_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupInfo_RSTimestampMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Backup_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Backup_proto_goTypes,
		DependencyIndexes: file_Backup_proto_depIdxs,
		EnumInfos:         file_Backup_proto_enumTypes,
		MessageInfos:      file_Backup_proto_msgTypes,
	}.Build()
	File_Backup_proto = out.File
	file_Backup_proto_rawDesc = nil
	file_Backup_proto_goTypes = nil
	file_Backup_proto_depIdxs = nil
}
